import React, { useState, useEffect, useRef } from 'react';
import { Link } from 'react-router-dom';
import './Header.css';
import { useCart } from './CartContext';
import { useAuth } from './AuthContext';
import aboutIcon from './assets/icons/about.png';
import contactsIcon from './assets/icons/contacts.png';
import cartIcon from './assets/icons/cart.png';
import profileIcon from './assets/icons/user-interface.png';
import loginIcon from './assets/icons/logout.png';
import boxesIcon from './assets/icons/boxes.png';
import heartIcon from './assets/icons/heart.png';


function Header() {
  const { cartItems } = useCart();
  const { user, logout } = useAuth();
  const totalCount = Array.isArray(cartItems)
  ? cartItems.reduce((sum, item) => sum + item.quantity, 0)
  : 0;

  const [query, setQuery] = useState('');
  const [results, setResults] = useState([]);
  const [isDropdownVisible, setIsDropdownVisible] = useState(false);
  const [showAddress, setShowAddress] = useState(false);
  const [profileMenuOpen, setProfileMenuOpen] = useState(false);
  const containerRef = useRef(null);
  const profileRef = useRef(null);
  const handleLogout = async () => {
    if (user?.id) {
      const token = localStorage.getItem('token');
  
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏–∑ localStorage –∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä:
      const cart = JSON.parse(localStorage.getItem('cart')) || [];
  
      try {
        await fetch(`http://localhost:5000/api/cart/save/${user.id}`, { // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π endpoint –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
          method: 'POST', // –ò–ª–∏ PUT, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç API
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ cartItems: cart }),
        });
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º:', err);
      }
    }
  
    logout();
  };
  
  
  // –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
  useEffect(() => {
    const timeout = setTimeout(() => {
      const trimmedQuery = query.trim();
  
      if (trimmedQuery) {
        const apiUrl = `http://localhost:5000/api/products?search=${encodeURIComponent(trimmedQuery)}`;
  
        fetch(apiUrl)
          .then(res => res.json())
          .then(data => setResults(data.products || []))
          .catch(err => console.error(err));
  
        setIsDropdownVisible(true);
      } else {
        // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞—è ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        setResults([]);
        setIsDropdownVisible(false);
      }
    }, 300);
  
    return () => clearTimeout(timeout);
  }, [query]);
  
  // –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—ã–ø–∞–¥–∞—à–µ–∫ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ
  useEffect(() => {
    function handleClickOutside(event) {
      if (
        containerRef.current && !containerRef.current.contains(event.target) &&
        profileRef.current && !profileRef.current.contains(event.target)
      ) {
        setIsDropdownVisible(false);
        setProfileMenuOpen(false);
      }
    }
    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  useEffect(() => {
    const timer = setTimeout(() => {
      setShowAddress(true);
    }, 100);
    return () => clearTimeout(timer);
  }, []);

  return (
    <header className="header">
      <div className="container header-flex">
        <div className="header-left">
          <div className={`address ${showAddress ? 'show' : 'hide'}`}>
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="address-icon"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
              strokeWidth={2}
              width="18"
              height="18"
              aria-hidden="true"
              focusable="false"
            >
              <path strokeLinecap="round" strokeLinejoin="round" d="M12 11c1.657 0 3-1.343 3-3S13.657 5 12 5 9 6.343 9 8s1.343 3 3 3z" />
              <path strokeLinecap="round" strokeLinejoin="round" d="M12 21c-4.418 0-8-3.582-8-8 0-4.418 3.582-8 8-8s8 3.582 8 8c0 4.418-3.582 8-8 8z" />
            </svg>
            –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1
          </div>
          <Link to="/" className="logo">üñ• TechStore</Link>
        </div>

        <div
          className="search-container"
          ref={containerRef}
          onFocus={() => query && setIsDropdownVisible(true)}
          style={{ position: 'relative' }}
        >
          <input
            type="text"
            placeholder="–ü–æ–∏—Å–∫..."
            className="search-input"
            value={query}
            onChange={e => setQuery(e.target.value)}
            onFocus={() => query && setIsDropdownVisible(true)}
          />
          {query && isDropdownVisible && results.length > 0 && (
            <ul className="search-dropdown">
              {results.map(product => (
                <li key={product.id}>
                  <Link to={`/product/${product.id}`}>{product.name}</Link>
                </li>
              ))}
            </ul>
          )}
          {query && isDropdownVisible && results.length === 0 && (
            <div className="search-dropdown empty">–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</div>
          )}
        </div>

        <nav className="nav">
  <Link to="/catalog">
    <img src={boxesIcon} alt="–ö–∞—Ç–∞–ª–æ–≥" className="nav-icon" /> –ö–∞—Ç–∞–ª–æ–≥
  </Link>
  <Link to="/about">
    <img src={aboutIcon} alt="–ú—ã" className="nav-icon" /> –ú—ã
  </Link>
  <Link to="/orders">
    <img src={contactsIcon} alt="–ó–∞–∫–∞–∑—ã" className="nav-icon" /> –ó–∞–∫–∞–∑—ã
  </Link>
  <Link to="/cart" className="nav-link cart-button">
    <img src={cartIcon} alt="–ö–æ—Ä–∑–∏–Ω–∞" className="nav-icon" /> 
    {totalCount > 0 && <span className="cart-count">{totalCount}</span>}
  </Link>

  {user ? (
    <div className="profile-wrapper" ref={profileRef}>
      <button
        className="profile-button"
        onClick={() => setProfileMenuOpen(prev => !prev)}
      >
        <img src={loginIcon} alt="–ü—Ä–æ—Ñ–∏–ª—å" className="nav-icon" /> {user.username} ‚ñæ
      </button>
      <div className={`profile-dropdown ${profileMenuOpen ? 'show' : ''}`}>
        <Link to="/profile" className="dropdown-item">
        <img src={profileIcon} alt="–í–æ–π—Ç–∏" className="nav-icon" /> –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å
        </Link>
        <Link to="/orders" className="dropdown-item">
          üì¶ –ó–∞–∫–∞–∑—ã
        </Link>
        <Link to="/support" className="dropdown-item"> 
        <img src={loginIcon} alt='–ü–æ–¥–¥–µ—Ä–∂–∫–∞' className='nav-icon' /> –ü–æ–¥–¥–µ—Ä–∂–∫–∞
         </Link>
        <Link to="/favourites" className="dropdown-item">
        <img src={heartIcon} alt="–í–æ–π—Ç–∏" className="nav-icon" /> –ò–∑–±—Ä–∞–Ω–Ω–æ–µ
        </Link>
        <button className="dropdown-item" onClick={handleLogout}>
        <img src={loginIcon} alt="–ü—Ä–æ—Ñ–∏–ª—å" className="nav-icon" />  –í—ã–π—Ç–∏
        </button>
      </div>
    </div>
  ) : (
    <Link to="/login" className="nav-link login-btn">
      <img src={profileIcon} alt="–í–æ–π—Ç–∏" className="nav-icon" /> –í–æ–π—Ç–∏
    </Link>
  )}
</nav>

      </div>
    </header>
  );
}

export default Header;
