const express = require('express'); 
const cors = require('cors');
const pool = require('./db');  // –ò–º–ø–æ—Ä—Ç –ø—É–ª–∞ –∏–∑ db.js
const authRoutes = require('./routes/authRoutes');
const cartRoutes = require('./routes/cartRoutes');
const jwt = require('jsonwebtoken');


const app = express();

app.use(cors());
app.use(express.json());
app.use((req, res, next) => {
  req.db = pool;
  next();
});

app.use('/api/cart', cartRoutes);


// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ
app.get('/api/test', async (req, res) => {
  try {
    const result = await pool.query('SELECT NOW()');
    res.json({ time: result.rows[0].now });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Database error' });
  }
});


// –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ id
// GET /api/products ‚Äî –≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ –∏–ª–∏ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É ids/limit/search
app.get('/api/products', async (req, res) => {
  try {
    const { ids, limit, search } = req.query;

    // –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–æ–∏—Å–∫–∞
    if (search) {
      const q = `%${search}%`;
      const result = await pool.query(
        `SELECT * FROM products WHERE name ILIKE $1 OR description ILIKE $1 LIMIT 100`,
        [q]
      );
      return res.json({ products: result.rows });
    }

    // –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —Å–ø–∏—Å–æ–∫ ids
    if (ids) {
      const idsArray = ids.split(',').map(id => parseInt(id)).filter(Boolean);
      if (idsArray.length === 0) {
        return res.json({ products: [] });
      }
      const result = await pool.query(
        `SELECT * FROM products WHERE id = ANY($1::int[])`,
        [idsArray]
      );
      return res.json({ products: result.rows });
    }

    // –∏–Ω–∞—á–µ ‚Äî –æ–±—ã—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ limit
    const limitNum = parseInt(limit) || 1000;
    const result = await pool.query(
      `SELECT * FROM products LIMIT $1`,
      [limitNum]
    );
    res.json({ products: result.rows });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤' });
  }
});

// GET /api/products/:id ‚Äî –≤–µ—Ä–Ω—É—Ç—å –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä
app.get('/api/products/:id', async (req, res) => {
  const { id } = req.params;
  try {
    const result = await pool.query(
      `SELECT * FROM products WHERE id = $1`,
      [id]
    );
    if (result.rows.length === 0) {
      return res.status(404).json({ message: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    res.json(result.rows[0]);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞' });
  }
});



// –ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/cart', authMiddleware, async (req, res) => {
  const userId = req.user.id;

  try {
    const result = await pool.query(
      `SELECT c.product_id, c.quantity, p.name, p.price, p.image
       FROM cart_items c
       JOIN products p ON c.product_id = p.id
       WHERE c.user_id = $1`,
      [userId]
    );

    res.json(result.rows); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É –Ω–∞ —Ñ—Ä–æ–Ω—Ç
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–∑–∏–Ω—ã' });
  }
});

// –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
app.post('/api/cart', authMiddleware, async (req, res) => {
  const userId = req.user.id;
  const { productId, quantity } = req.body;

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
    const existingProduct = await pool.query(
      `SELECT * FROM cart_items WHERE user_id = $1 AND product_id = $2`,
      [userId, productId]
    );

    if (existingProduct.rows.length > 0) {
      // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –µ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      await pool.query(
        `UPDATE cart_items SET quantity = quantity + $3 
         WHERE user_id = $1 AND product_id = $2`,
        [userId, productId, quantity]
      );
    } else {
      // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
      await pool.query(
        `INSERT INTO cart_items (user_id, product_id, quantity) VALUES ($1, $2, $3)`,
        [userId, productId, quantity]
      );
    }

    // ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
    const result = await pool.query(
      `SELECT c.product_id, c.quantity, p.name, p.price, p.image
       FROM cart_items c
       JOIN products p ON c.product_id = p.id
       WHERE c.user_id = $1`,
      [userId]
    );
    res.json(result.rows);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞' });
  }
});




// –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
app.put('/api/cart', authMiddleware, async (req, res) => {
  const userId = req.user.id;
  const { productId, quantity } = req.body;
  try {
    if (quantity <= 0) {
      await pool.query(
        `DELETE FROM cart_items WHERE user_id = $1 AND product_id = $2`,
        [userId, productId]
      );
      return res.json({ message: '–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã' });
    }

    await pool.query(
      `UPDATE cart_items SET quantity = $3 WHERE user_id = $1 AND product_id = $2`,
      [userId, productId, quantity]
    );
    res.json({ message: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ' });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã' });
  }
});

// –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
app.delete('/api/cart/remove/:productId', authMiddleware, async (req, res) => {
  const userId = req.user.id;
  const { productId } = req.params;

  try {
    await pool.query(
      `DELETE FROM cart_items WHERE user_id = $1 AND product_id = $2`,
      [userId, productId]
    );

    // ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É
    const result = await pool.query(
      `SELECT c.product_id, c.quantity, p.name, p.price, p.image
       FROM cart_items c
       JOIN products p ON c.product_id = p.id
       WHERE c.user_id = $1`,
      [userId]
    );
    res.json(result.rows);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/favourites', authMiddleware, async (req, res) => {
  const userId = req.user.id;

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ product_id –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ user_id
    const result = await pool.query(
      `SELECT product_id FROM favourites WHERE user_id = $1`,
      [userId]
    );

    // –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    if (result.rows.length === 0) {
      return res.json([]); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    }

    const productIds = result.rows.map(row => row.product_id);

    // –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
    const productsResult = await pool.query(
      `SELECT * FROM products WHERE id = ANY($1::int[])`,
      [productIds]
    );


    res.json(productsResult.rows); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ' });
  }
});




// –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
app.post('/api/favourites', authMiddleware, async (req, res) => {
  const userId = req.user.id;
  const { productId } = req.body;

  try {
    
    await pool.query(
      `INSERT INTO favourites (user_id, product_id) VALUES ($1, $2) ON CONFLICT DO NOTHING`,
      [userId, productId]
    );

    res.status(201).send();
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ' });
  }
});




// –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
app.delete('/api/favourites/:productId', authMiddleware, async (req, res) => {
  const userId = req.user.id;
  const productId = req.params.productId;
  try {
    await pool.query(
      `DELETE FROM favourites WHERE user_id = $1 AND product_id = $2`,
      [userId, productId]
    );
    res.status(204).send();
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ' });
  }
});


app.use('/api/auth', authRoutes);

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`üöÄ Server running on port ${PORT}`);
});

function authMiddleware(req, res, next) {
  const authHeader = req.headers.authorization;
  if (!authHeader) return res.status(401).json({ message: '–ù–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' });

  const token = authHeader.split(' ')[1];
  if (!token) return res.status(401).json({ message: '–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞' });

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = decoded; // { id, username, iat, exp }
    next();
  } catch (e) {
    return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' });
  }
}